// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// vector_gcd
int vector_gcd(NumericVector vec);
RcppExport SEXP _minMSE_vector_gcd(SEXP vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericVector >::type vec(vecSEXP);
    rcpp_result_gen = Rcpp::wrap(vector_gcd(vec));
    return rcpp_result_gen;
END_RCPP
}
// count_occurrences
int count_occurrences(DataFrame df_treatments, NumericVector curr_treatment);
RcppExport SEXP _minMSE_count_occurrences(SEXP df_treatmentsSEXP, SEXP curr_treatmentSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< DataFrame >::type df_treatments(df_treatmentsSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type curr_treatment(curr_treatmentSEXP);
    rcpp_result_gen = Rcpp::wrap(count_occurrences(df_treatments, curr_treatment));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_minMSE_vector_gcd", (DL_FUNC) &_minMSE_vector_gcd, 1},
    {"_minMSE_count_occurrences", (DL_FUNC) &_minMSE_count_occurrences, 2},
    {NULL, NULL, 0}
};

RcppExport void R_init_minMSE(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
